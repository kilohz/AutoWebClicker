// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Firefox;
//using OpenQA.Selenium.Support.UI;
//using OpenQA.Selenium.Interactions;
using Xunit;
using Polly;
using System.Diagnostics;
using System.Configuration;

public class SuiteTests : IDisposable
{
    public IWebDriver driver { get; private set; }
    public IDictionary<String, Object> vars { get; private set; }
    public IJavaScriptExecutor js { get; private set; }
    public SuiteTests()
    {
        string strCmdText = $"Chrome.exe --remote-debugging-port={ConfigurationManager.AppSettings["ChromeDebugPort"]} --no-first-run --no-default-browser-check --user-data-dir=\"{ConfigurationManager.AppSettings["ChromeDebugProfileDir"]}\"";
        RunCMD(strCmdText);

        ChromeOptions options = new ChromeOptions();
        options.DebuggerAddress = $"127.0.0.1:{ConfigurationManager.AppSettings["ChromeDebugPort"]}";

        // Using Polly library: https://github.com/App-vNext/Polly
        // Polly probably isn't needed in a single scenario like this, but can be useful in a broader automation project
        // Once we attach to Chrome with Selenium, use a WebDriverWait implementation
        var policy = Policy.Handle<InvalidOperationException>()
          .WaitAndRetry(10, t => TimeSpan.FromSeconds(1));

        policy.Execute(() =>
        {
            driver = new ChromeDriver(options);
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<String, Object>();
        });

    }

    private void RunCMD(string command)
    {
        Process cmd = new Process();
        cmd.StartInfo.FileName = "cmd.exe";
        cmd.StartInfo.RedirectStandardInput = true;
        cmd.StartInfo.RedirectStandardOutput = true;
        cmd.StartInfo.CreateNoWindow = true;
        cmd.StartInfo.UseShellExecute = false;
        cmd.Start();

        cmd.StandardInput.WriteLine(command);
        cmd.StandardInput.Flush();
        cmd.StandardInput.Close();
        //cmd.WaitForExit();
        //Console.WriteLine(cmd.StandardOutput.ReadToEnd());
    }

    public void Dispose()
    {
        driver.Quit();
    }

    [Fact]
    public void CollectPoints()
    {
        driver.Navigate().GoToUrl(ConfigurationManager.AppSettings["CollectionUrl"]);
        driver.Manage().Window.Size = new System.Drawing.Size(974, 1040);
        driver.FindElement(By.LinkText(ConfigurationManager.AppSettings["AnchorText"])).Click();
    }
}
